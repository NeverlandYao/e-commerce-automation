version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-ai-postgres
    environment:
      POSTGRES_DB: ecommerce_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ecommerce-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce-ai-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/ecommerce_ai
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - API_PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-ai-network
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs

  # 脚本服务
  scripts:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    container_name: ecommerce-ai-scripts
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-3.5-turbo
      - BACKEND_URL=http://backend:3001
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - backend
    networks:
      - ecommerce-ai-network
    restart: unless-stopped

  # 前端Web应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce-ai-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_SCRIPTS_API_URL=http://localhost:3002
    depends_on:
      - backend
      - scripts
    networks:
      - ecommerce-ai-network
    restart: unless-stopped

  # Nginx反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - scripts
    networks:
      - ecommerce-ai-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce-ai-network:
    driver: bridge